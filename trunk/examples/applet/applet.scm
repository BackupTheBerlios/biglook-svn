;*=====================================================================*/
;*    serrano/prgm/project/biglook/examples/applet/applet.scm          */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Mon May  7 16:43:38 2001                          */
;*    Last change :  Mon Sep  3 08:11:36 2001 (serrano)                */
;*    Copyright   :  2001 Manuel Serrano                               */
;*    -------------------------------------------------------------    */
;*    The scheme part of the applet                                    */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module applet
   
   (library biglook)
   
   (main main))

(define (main argv)
   (print "argv: " argv))

(let* ((win (if (pair? (command-line))
		(instantiate::window)
		(instantiate::applet)))
       (box (instantiate::box
	       (parent win)))
       (button (instantiate::button
		  (parent box)
		  (command (lambda (e)
			      (exit 1)))
		  (image (string->image "/* XPM */
static char *undisp[] = {
/* width height num_colors chars_per_pixel */
\"    33    33        5            1\",
/* colors */
\"# c #000000\",
\"+ c #000088\",
\"a c #787c78\",
\"_ c None\",
\"c c #f8fcf8\",
/* pixels */
\"_________________________________\",
\"_________________________________\",
\"_________________________________\",
\"_________________________________\",
\"_________________________________\",
\"__________++_________++__________\",
\"_________a++_________++a_________\",
\"_________+++a_aaaaa_a+++_________\",
\"____________###ccc###____________\",
\"___________#c_______c#___________\",
\"___________#_a#a_a#a_#___________\",
\"___________#_###_###_#___________\",
\"___________#acc_#_cca#___________\",
\"____________#a__c__a#____________\",
\"_____________#_____#_____________\",
\"___________a+##_#_#++a___________\",
\"________+a++__#___#__++a+________\",
\"_________++____###____++_________\",
\"__________+___________+__________\",
\"_________________________________\",
\"_________________________________\",
\"_________________________________\",
\"_________________________________\",
\"_________________________________\",
\"__________#______________________\",
\"______###_#______________________\",
\"_____#____#____##__###__##_______\",
\"_____#____#___#__#_#___#__#______\",
\"_____#____#___#__#_###_####______\",
\"_____#____#___#__#___#_#_________\",
\"______###__##__##__###__###______\",
\"_________________________________\",
\"_________________________________\"
};"))))
       (label (instantiate::label
		 (parent box)))
       (entry (instantiate::entry
		 (parent box)))
       (button (instantiate::button
		  (parent box)
		  (text "Eval...")
		  (command (lambda (e)
			      (let* ((port (open-input-string
					    (entry-text entry)))
				     (exp (read port))
				     (val (eval exp))
				     (str (with-output-to-string
					     (lambda ()
						(write val)))))
				 (entry-text-set! entry "")
				 (label-text-set! label str)))))))
   #unspecified)
